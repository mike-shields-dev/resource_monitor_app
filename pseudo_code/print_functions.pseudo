// Functions responsible for printing the table and it's 
// data to the command line

function print_header(table_dims, banner) {    
    DECLARE content_width = table_dims["header_width"]

    // Print top border
    PRINT "\n"
    PRINT "╔"
    PRINT REPEAT("═", table_dims["header_width"])
    PRINT "╗"

    // Print side borders and content
    PRINT "\n"
    PRINT "║"
    PRINT REPEAT(" ", table_dims["min_pad_length"])  
    PRINT banner      
    PRINT REPEAT(" ", content_width - LENGTH(banner))
    PRINT "║"
    
    // Print bottom border
    PRINT "\n"
    PRINT "╠"
    PRINT REPEAT("═", table_dims["key_column_width"])
    PRINT "╤"
    PRINT REPEAT("═", table_dims["value_column_width"])
    PRINT "╣"
}

function print_row(table_dims, key, value) {    
    // Print side borders, column contents and divider
    PRINT "\n"
    PRINT "║" 
    PRINT REPEAT(" ", table_dims["min_pad_length"])
    PRINT key
    PRINT REPEAT(" ", (key_column_width - LENGTH(key) - table_dims["min_pad_length"]))
    PRINT "│"
    PRINT REPEAT(" ", min_pad_length) 
    PRINT value
    PRINT REPEAT(" ", (value_column_width - LENGTH(value) - table_dims["min_pad_length"])) 
    PRINT "║"

    // Print bottom border 
    PRINT "\n"
    PRINT "╟" 
    PRINT REPEAT("─", table_dims["key_column_width"])
    PRINT "┼"
    PRINT REPEAT("─", table_dims["value_column_width"])
    PRINT "╢"
}

function print_last_row(table_dims, row_data[2] as string) {
    // Print side borders, column contents and divider
    PRINT "\n"
    PRINT "║"
    PRINT REPEAT(" ", table_dims["min_pad_length"])
    PRINT key 
    PRINT REPEAT(" ", (key_column_width - LENGTH(key) - table_dims["min_pad_length"]))
    PRINT "│" 
    PRINT value 
    PRINT REPEAT(" ", (value_column_width - LENGTH(value) - table_dims["min_pad_length"]))
    PRINT "║"
    
    // Print bottom border
    PRINT "\n"
    PRINT "╚"
    PRINT REPEAT("═", key_column_width)
    PRINT "╧"
    PRINT REPEAT("═", value_column_width)
    PRINT "╝"
}

function print_rows(table_dims, table_data) {
    foreach (index = 0...LENGTH(table_data)) {
        DECLARE row_data = table_data[index]
        if(index < LENGTH(table_data) - 1) {
            print_row(row_data, table_dims)
        } else {
            print_last_row(row_data, table_dims) 
        }
    }
}

function print_table(table_data, banner) {   
    DECLARE table_dims as hashmap = calculate_dims(banner, table_data)
    
    print_header(table_dims, banner)
    print_rows(table_dims, table_data)
}